import{_ as r,C as c,c as i,o as d,ag as s,G as l,w as o,j as a}from"./chunks/framework._HD6XqYi.js";const C=JSON.parse('{"title":"Carousel 轮播","description":"","frontmatter":{},"headers":[],"relativePath":"components/carousel.md","filePath":"components/carousel.md","lastUpdated":1748944655000}'),n={name:"components/carousel.md"};function u(h,e,p,m,_,b){const t=c("ClientOnly");return d(),i("div",null,[e[2]||(e[2]=s(`<h1 id="carousel-轮播" tabindex="-1">Carousel 轮播 <a class="header-anchor" href="#carousel-轮播" aria-label="Permalink to &quot;Carousel 轮播&quot;">​</a></h1><p>在同一平级(水平、垂直)内容下，循环播放展示子内容。</p><h2 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Carousel, CarouselItem, regist } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;litos-ui&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">regist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([Carousel, CarouselItem]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="演示" tabindex="-1">演示 <a class="header-anchor" href="#演示" aria-label="Permalink to &quot;演示&quot;">​</a></h2><h3 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h3><p>结合使用 <code>l-carousel</code> 和 <code>l-carousel-item</code> 标签就能实现轮播。把想要展示的内容放在 <code>l-carousel-item</code> 标签内。</p>`,7)),l(t,null,{default:o(()=>[...e[0]||(e[0]=[a("l-code-preview",null,[a("textarea",{lang:"html"},`  <l-carousel loop="off" autoplay>
    <l-carousel-item class="carousel-item carousel1">1</l-carousel-item>
    <l-carousel-item class="carousel-item carousel2">2</l-carousel-item>
    <l-carousel-item class="carousel-item carousel3">3</l-carousel-item>
    <l-carousel-item class="carousel-item carousel4">4</l-carousel-item>
    <l-carousel-item class="carousel-item carousel5">5</l-carousel-item>
  </l-carousel>
`)],-1)])]),_:1}),e[3]||(e[3]=s('<h3 id="箭头切换" tabindex="-1">箭头切换 <a class="header-anchor" href="#箭头切换" aria-label="Permalink to &quot;箭头切换&quot;">​</a></h3><p><code>arrows</code> 属性定义了切换箭头的显示时机。默认情况下，切换箭头只有在鼠标 <code>hover</code> 到组件上时才会显示。 若将 <code>arrows</code> 设置为 <code>always</code>，则会一直显示；设置为 <code>never</code>，则会一直隐藏。</p>',2)),l(t,null,{default:o(()=>[...e[1]||(e[1]=[a("l-code-preview",null,[a("textarea",{lang:"html"},`  <l-carousel arrows="always">
    <l-carousel-item class="carousel-item carousel1">1</l-carousel-item>
    <l-carousel-item class="carousel-item carousel2">2</l-carousel-item>
    <l-carousel-item class="carousel-item carousel3">3</l-carousel-item>
    <l-carousel-item class="carousel-item carousel4">4</l-carousel-item>
    <l-carousel-item class="carousel-item carousel5">5</l-carousel-item>
  </l-carousel>
`)],-1)])]),_:1}),e[4]||(e[4]=s('<h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="carousel-attibutes" tabindex="-1">Carousel Attibutes <a class="header-anchor" href="#carousel-attibutes" aria-label="Permalink to &quot;Carousel Attibutes&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>arrows</code></td><td>切换箭头的显示时机</td><td><code>hover</code>|<code>always</code>|<code>never</code></td><td><code>hover</code></td></tr><tr><td><code>current-index</code></td><td>激活的幻灯片的索引，从 <code>0</code> 开始</td><td><code>number</code></td><td><code>0</code></td></tr><tr><td><code>loop</code></td><td>是否开启循环显示</td><td><code>on</code>|<code>off</code></td><td><code>on</code></td></tr><tr><td><code>autoplay</code></td><td>是否自动切换</td><td><code>boolean</code></td><td><code>false</code></td></tr></tbody></table>',3))])}const f=r(n,[["render",u]]);export{C as __pageData,f as default};

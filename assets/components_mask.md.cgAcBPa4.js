import{v as i,x as n,C as h,c,o as b,ag as d,G as u,w as p,j as l}from"./chunks/framework._HD6XqYi.js";const y=JSON.parse('{"title":"Mask 浮层遮罩","description":"","frontmatter":{},"headers":[],"relativePath":"components/mask.md","filePath":"components/mask.md","lastUpdated":1753941375000}'),m={name:"components/mask.md"},x=Object.assign(m,{setup(k){{let a=function(r){const s=r.target.getAttribute("data-action");s&&e&&(e.open=s==="open")},e,t,o;i(()=>{requestAnimationFrame(()=>{e=document.querySelector("#overlay"),t=document.querySelector("#open"),o=document.querySelector("#close"),t&&t.addEventListener("click",a),o&&o.addEventListener("click",a)})}),n(()=>{t&&t.removeEventListener("click",a),o&&o.removeEventListener("click",a)})}return(a,e)=>{const t=h("ClientOnly");return b(),c("div",null,[e[1]||(e[1]=d('<h1 id="mask-浮层遮罩" tabindex="-1">Mask 浮层遮罩 <a class="header-anchor" href="#mask-浮层遮罩" aria-label="Permalink to &quot;Mask 浮层遮罩&quot;">​</a></h1><p>基础遮罩组件，弹出窗、图片预览框都是基于该组件实现的。</p><h2 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Mask } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;litos-ui&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="演示" tabindex="-1">演示 <a class="header-anchor" href="#演示" aria-label="Permalink to &quot;演示&quot;">​</a></h2><h3 id="直接用法" tabindex="-1">直接用法 <a class="header-anchor" href="#直接用法" aria-label="Permalink to &quot;直接用法&quot;">​</a></h3><p>通过 <code>regist</code> 注册组件，然后在模板中使用 <code>&lt;l-mask&gt;</code> 标签即可, 可以通过 <code>open</code> 属性控制是否显示遮罩层。</p>',7)),u(t,null,{default:p(()=>[...e[0]||(e[0]=[l("l-code-preview",null,[l("textarea",{lang:"html"},`  <l-mask id="overlay" open></l-mask>
  <l-button id="open" data-action="open">打开</l-button>
`)],-1)])]),_:1}),e[2]||(e[2]=d('<h3 id="继承使用" tabindex="-1">继承使用 <a class="header-anchor" href="#继承使用" aria-label="Permalink to &quot;继承使用&quot;">​</a></h3><p>通过继承 <code>Mask</code> 类，然后实现自定义功能逻辑，为自定义的类设置一个 <code>static baseName = &quot;x&quot;;</code> 将 <code>x</code> 替换为自定义的组件名称，就能在模板中使用 <code>&lt;l-x&gt;</code> 标签了。</p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="baseoverlay-attibutes" tabindex="-1">BaseOverlay Attibutes <a class="header-anchor" href="#baseoverlay-attibutes" aria-label="Permalink to &quot;BaseOverlay Attibutes&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>x</td><td>x</td><td>x</td><td>x</td></tr></tbody></table><h3 id="baseoverlay-slots" tabindex="-1">BaseOverlay Slots <a class="header-anchor" href="#baseoverlay-slots" aria-label="Permalink to &quot;BaseOverlay Slots&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><code>default</code></td><td>内容</td></tr></tbody></table><h3 id="baseoverlay-events" tabindex="-1">BaseOverlay Events <a class="header-anchor" href="#baseoverlay-events" aria-label="Permalink to &quot;BaseOverlay Events&quot;">​</a></h3><table tabindex="0"><thead><tr><th>事件名</th><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td><code>click</code></td><td>点击按钮时触发</td><td><code>(event: Event)</code></td></tr></tbody></table><h3 id="baseoverlay-methods" tabindex="-1">BaseOverlay Methods <a class="header-anchor" href="#baseoverlay-methods" aria-label="Permalink to &quot;BaseOverlay Methods&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td><code>x</code></td><td>x</td><td><code>(x: number): string</code></td></tr></tbody></table><h3 id="baseoverlay-css-variables" tabindex="-1">BaseOverlay CSS Variables <a class="header-anchor" href="#baseoverlay-css-variables" aria-label="Permalink to &quot;BaseOverlay CSS Variables&quot;">​</a></h3><table tabindex="0"><thead><tr><th>变量名</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td><code>--l</code></td><td>x</td><td><code>#fff</code></td></tr></tbody></table>',13))])}}});export{y as __pageData,x as default};
